{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.33.5",
    "schemaVersion": 1010,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "file-conver!",
  "docComment": "",
  "name": "file-conver",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "file-conver!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "file-conver!ContentConver:type",
          "docComment": "/**\n * 内容转换器\n *\n * @remarks\n *\n * 如果某个内容转换器返回 null 或 undefined，则后续的内容转换器便不会调用。\n *\n * @param content - 输入的文件内容\n *\n * @returns 返回转换后的文件内容\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ContentConver<Content extends "
            },
            {
              "kind": "Reference",
              "text": "FileContent",
              "canonicalReference": "file-conver!FileContent:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "(content: Content, fileInfo: "
            },
            {
              "kind": "Reference",
              "text": "FileInfo",
              "canonicalReference": "file-conver!FileInfo:interface"
            },
            {
              "kind": "Content",
              "text": ", config: "
            },
            {
              "kind": "Reference",
              "text": "RequiredFileConverConfig",
              "canonicalReference": "file-conver!RequiredFileConverConfig:type"
            },
            {
              "kind": "Content",
              "text": ") => Content | null | undefined | "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<Content | null | undefined>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/conver.d.ts",
          "releaseTag": "Public",
          "name": "ContentConver",
          "typeParameters": [
            {
              "typeParameterName": "Content",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "file-conver!ConverResult:type",
          "docComment": "/**\n * 处理结果\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ConverResult = "
            },
            {
              "kind": "Reference",
              "text": "FileWriteInfo",
              "canonicalReference": "file-conver!FileWriteInfo:type"
            },
            {
              "kind": "Content",
              "text": "[] | "
            },
            {
              "kind": "Reference",
              "text": "FileWriteInfo",
              "canonicalReference": "file-conver!FileWriteInfo:type"
            },
            {
              "kind": "Content",
              "text": " | null | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/file-conver.d.ts",
          "releaseTag": "Public",
          "name": "ConverResult",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "file-conver!createConver:function(1)",
          "docComment": "/**\n * 通过一组内容转换器生成创建文件转换器\n *\n * @remarks\n *\n * 如果某个内容转换器返回 null 或 undefined，则后续的内容转换器便不会调用。\n *\n * @param contentConver - 一个 或 一组内容转换器\n *\n * @returns 文件转换器\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createConver<Content extends "
            },
            {
              "kind": "Reference",
              "text": "FileContent",
              "canonicalReference": "file-conver!FileContent:type"
            },
            {
              "kind": "Content",
              "text": ">(contentConver: "
            },
            {
              "kind": "Reference",
              "text": "ContentConver",
              "canonicalReference": "file-conver!ContentConver:type"
            },
            {
              "kind": "Content",
              "text": "<Content>[] | "
            },
            {
              "kind": "Reference",
              "text": "ContentConver",
              "canonicalReference": "file-conver!ContentConver:type"
            },
            {
              "kind": "Content",
              "text": "<Content>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "FileConver",
              "canonicalReference": "file-conver!FileConver:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/conver.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "contentConver",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Content",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createConver"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "file-conver!FileContent:type",
          "docComment": "/**\n * 文件内容的类型\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type FileContent = "
            },
            {
              "kind": "Content",
              "text": "string | "
            },
            {
              "kind": "Reference",
              "text": "Buffer",
              "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/file-conver.d.ts",
          "releaseTag": "Public",
          "name": "FileContent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "file-conver!fileConver:function(1)",
          "docComment": "/**\n * 批量处理文件\n *\n * @param config - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fileConver(config: "
            },
            {
              "kind": "Reference",
              "text": "FileConverConfig",
              "canonicalReference": "file-conver!FileConverConfig:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/file-conver.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "fileConver"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "file-conver!FileConver:type",
          "docComment": "/**\n * 文件转换器\n *\n * @remarks\n *\n * 可返回 Promise ，支持异步转换\n *\n * @returns 当返回 或 `content` 为 null | undefined 时，则不会生成对应的输出文件\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type FileConver = "
            },
            {
              "kind": "Content",
              "text": "(preConverResult: "
            },
            {
              "kind": "Reference",
              "text": "FileWriteInfo",
              "canonicalReference": "file-conver!FileWriteInfo:type"
            },
            {
              "kind": "Content",
              "text": "[], fileInfo: "
            },
            {
              "kind": "Reference",
              "text": "FileInfo",
              "canonicalReference": "file-conver!FileInfo:interface"
            },
            {
              "kind": "Content",
              "text": ", config: "
            },
            {
              "kind": "Reference",
              "text": "RequiredFileConverConfig",
              "canonicalReference": "file-conver!RequiredFileConverConfig:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "ConverResult",
              "canonicalReference": "file-conver!ConverResult:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ConverResult",
              "canonicalReference": "file-conver!ConverResult:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/file-conver.d.ts",
          "releaseTag": "Public",
          "name": "FileConver",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "file-conver!FileConverConfig:interface",
          "docComment": "/**\n * 文件转换器的配置项\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FileConverConfig "
            }
          ],
          "fileUrlPath": "dist/file-conver.d.ts",
          "releaseTag": "Public",
          "name": "FileConverConfig",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "file-conver!FileConverConfig#conver:member",
              "docComment": "/**\n * 转换器\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "conver: "
                },
                {
                  "kind": "Reference",
                  "text": "FileConver",
                  "canonicalReference": "file-conver!FileConver:type"
                },
                {
                  "kind": "Content",
                  "text": "[] | "
                },
                {
                  "kind": "Reference",
                  "text": "FileConver",
                  "canonicalReference": "file-conver!FileConver:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "conver",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "file-conver!FileConverConfig#emitUnconverted:member",
              "docComment": "/**\n * 是否输出内容没有变化的文件\n *\n * @remarks\n *\n * 当值为 false 时，如果文件内容没有做任务转换，即使 输出路径、输出字符编码、输出文件模式 与原来的不同，也不会输出文件。\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emitUnconverted?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "emitUnconverted",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "file-conver!FileConverConfig#encoding:member",
              "docComment": "/**\n * 输入文件的字符编码\n *\n * @remarks\n *\n * 当 encoding 为 null 时，文件的内容会读取为 Buffer 类型，否则会读取为 字符串\n *\n * @defaultValue\n *\n * \"utf8\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "encoding?: "
                },
                {
                  "kind": "Reference",
                  "text": "BufferEncoding",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.BufferEncoding:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "encoding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "file-conver!FileConverConfig#filter:member",
              "docComment": "/**\n * {@inheritDoc ./fs-tools.js#Filter}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "filter?: "
                },
                {
                  "kind": "Reference",
                  "text": "Filter",
                  "canonicalReference": "file-conver!Filter:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "filter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "file-conver!FileConverConfig#input:member",
              "docComment": "/**\n * 入口路径\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "input: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "input",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "file-conver!FileConverConfig#outEncoding:member",
              "docComment": "/**\n * 输出文件的字符编码\n *\n * @defaultValue\n *\n * 输入文件的字符编码 encoding\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "outEncoding?: "
                },
                {
                  "kind": "Reference",
                  "text": "BufferEncoding",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.BufferEncoding:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "outEncoding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "file-conver!FileConverConfig#outMode:member",
              "docComment": "/**\n * 输出文件的模式（权限）\n *\n * @remarks\n *\n * 模式选项仅影响新创建的文件。请参阅 fs.open（） 了解更多详情。\n *\n * @defaultValue\n *\n * 0o666\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "outMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "Mode",
                  "canonicalReference": "!\"\\\"fs\\\"\".Mode:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "outMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "file-conver!FileConverConfig#output:member",
              "docComment": "/**\n * 输出路径\n *\n * @defaultValue\n *\n * 入口路径 input\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "output?: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "output",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "file-conver!FileInfo:interface",
          "docComment": "/**\n * 文件信息\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FileInfo extends "
            },
            {
              "kind": "Reference",
              "text": "FileMeta",
              "canonicalReference": "file-conver!FileMeta:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/file-conver.d.ts",
          "releaseTag": "Public",
          "name": "FileInfo",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "file-conver!FileInfo#content:member",
              "docComment": "/**\n * 文件的内容\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "content: "
                },
                {
                  "kind": "Reference",
                  "text": "FileContent",
                  "canonicalReference": "file-conver!FileContent:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "content",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "file-conver!FileMeta:interface",
          "docComment": "/**\n * 文件的元数据\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FileMeta extends "
            },
            {
              "kind": "Reference",
              "text": "ParsedPath",
              "canonicalReference": "!\"\\\"path\\\"\".path.ParsedPath:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/file-conver.d.ts",
          "releaseTag": "Public",
          "name": "FileMeta",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "file-conver!FileMeta#encoding:member",
              "docComment": "/**\n * 文件的字符编码\n *\n * @defaultValue\n *\n * \"utf8\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "encoding?: "
                },
                {
                  "kind": "Reference",
                  "text": "BufferEncoding",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.BufferEncoding:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "encoding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "file-conver!FileMeta#mode:member",
              "docComment": "/**\n * 输出文件的模式（权限）\n *\n * @remarks\n *\n * 模式选项仅影响新创建的文件。请参阅 fs.open（） 了解更多详情。\n *\n * @defaultValue\n *\n * 0o666\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mode?: "
                },
                {
                  "kind": "Reference",
                  "text": "Mode",
                  "canonicalReference": "!\"\\\"fs\\\"\".Mode:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "mode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "file-conver!FileMeta#path:member",
              "docComment": "/**\n * 资源的全路径\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "path",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "file-conver!fileReadWrite:function(1)",
          "docComment": "/**\n * 文件读写\n *\n * @param fileMeta - \n *\n * @param convers - \n *\n * @param config - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fileReadWrite(fileMeta: "
            },
            {
              "kind": "Reference",
              "text": "FileMeta",
              "canonicalReference": "file-conver!FileMeta:interface"
            },
            {
              "kind": "Content",
              "text": ", config: "
            },
            {
              "kind": "Reference",
              "text": "RequiredFileConverConfig",
              "canonicalReference": "file-conver!RequiredFileConverConfig:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/file-conver.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "fileMeta",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "fileReadWrite"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "file-conver!FileWriteInfo:type",
          "docComment": "/**\n * 文件写入选项\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type FileWriteInfo = "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FileMeta",
              "canonicalReference": "file-conver!FileMeta:interface"
            },
            {
              "kind": "Content",
              "text": ", \"path\">> & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FileInfo",
              "canonicalReference": "file-conver!FileInfo:interface"
            },
            {
              "kind": "Content",
              "text": ", \"content\">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/file-conver.d.ts",
          "releaseTag": "Public",
          "name": "FileWriteInfo",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "file-conver!Filter:type",
          "docComment": "/**\n * 资源过滤器\n *\n * @remarks\n *\n * 可用于筛选被转换的文件\n *\n * @param dirent - 具体资源的信息\n *\n * @param path - 当前资源所在的目录路径  @return 返回的值表示是否要转换该资源：真值：转换；假值：不转换\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Filter = "
            },
            {
              "kind": "Content",
              "text": "(dirent: "
            },
            {
              "kind": "Reference",
              "text": "Dirent",
              "canonicalReference": "!\"\\\"fs\\\"\".Dirent:class"
            },
            {
              "kind": "Content",
              "text": ", path: string) => boolean | null | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/fs-tools.d.ts",
          "releaseTag": "Public",
          "name": "Filter",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "file-conver!getAllFiles:function(1)",
          "docComment": "/**\n * 获取路径 path 下的所有文件的路径\n *\n * @param path - \n *\n * @param filter - 资源过滤器\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAllFiles(path: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", filter?: "
            },
            {
              "kind": "Reference",
              "text": "Filter",
              "canonicalReference": "file-conver!Filter:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AsyncGenerator",
              "canonicalReference": "!AsyncGenerator:interface"
            },
            {
              "kind": "Content",
              "text": "<string, void, unknown>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/fs-tools.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "path",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "filter",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": true
            }
          ],
          "name": "getAllFiles"
        },
        {
          "kind": "Function",
          "canonicalReference": "file-conver!getAllFilesOfDir:function(1)",
          "docComment": "/**\n * 获取目录 path 下的所有文件的路径\n *\n * @param path - \n *\n * @param filter - 资源过滤器\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAllFilesOfDir(path: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", filter?: "
            },
            {
              "kind": "Reference",
              "text": "Filter",
              "canonicalReference": "file-conver!Filter:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AsyncGenerator",
              "canonicalReference": "!AsyncGenerator:interface"
            },
            {
              "kind": "Content",
              "text": "<string>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/fs-tools.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "path",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "filter",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": true
            }
          ],
          "name": "getAllFilesOfDir"
        },
        {
          "kind": "Function",
          "canonicalReference": "file-conver!getJoinPath:function(1)",
          "docComment": "/**\n * 获取一个不会被URL编码的且不带协议的纯路径\n *\n * @remarks\n *\n * 返回一个不会被URL编码的路径，即：可能带有中文 或 特殊字符的路径\n *\n * @param baseUrl - 参考的url\n *\n * @param paths - 路径片段\n *\n * @returns 返回一个不会被URL编码的路径，即：可能带有中文 或 特殊字符的路径\n *\n * @example\n * ```\n * getJoinPath(import.meta.url,\"./src\")\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getJoinPath(baseUrl: "
            },
            {
              "kind": "Content",
              "text": "string | "
            },
            {
              "kind": "Reference",
              "text": "URL",
              "canonicalReference": "!URL:interface"
            },
            {
              "kind": "Content",
              "text": ", ...paths: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/fs-tools.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "baseUrl",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "paths",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "getJoinPath"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "file-conver!RequiredFileConverConfig:type",
          "docComment": "/**\n * 文件转换器的配置项的必须版本\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type RequiredFileConverConfig = "
            },
            {
              "kind": "Content",
              "text": "{\n    [K in "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<keyof "
            },
            {
              "kind": "Reference",
              "text": "FileConverConfig",
              "canonicalReference": "file-conver!FileConverConfig:interface"
            },
            {
              "kind": "Content",
              "text": ", \"outMode\" | \"emitUnconverted\" | \"encoding\" | \"outEncoding\" | \"conver\" | \"filter\">]: "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FileConverConfig",
              "canonicalReference": "file-conver!FileConverConfig:interface"
            },
            {
              "kind": "Content",
              "text": "[K]>;\n} & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FileConverConfig",
              "canonicalReference": "file-conver!FileConverConfig:interface"
            },
            {
              "kind": "Content",
              "text": ", \"emitUnconverted\" | \"encoding\" | \"outEncoding\" | \"filter\"> & {\n    outMode?: "
            },
            {
              "kind": "Reference",
              "text": "Mode",
              "canonicalReference": "!\"\\\"fs\\\"\".Mode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    conver: "
            },
            {
              "kind": "Reference",
              "text": "FileConver",
              "canonicalReference": "file-conver!FileConver:type"
            },
            {
              "kind": "Content",
              "text": "[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/file-conver.d.ts",
          "releaseTag": "Public",
          "name": "RequiredFileConverConfig",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 18
          }
        }
      ]
    }
  ]
}
